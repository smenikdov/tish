//  ============================================= CONSTANTS =============================================
enum OrderStatus {
    PAYMENT
    PREPARATION
    DELIVERY
    WAITING
    RECEIVED
}

enum PaymentStatus {
    PENDING
    SUCCEEDED
    CANCELED
}

enum UserRole {
    USER
    ADMIN
    GUEST
}

enum UserSex {
    MALE
    FEMALE
}

enum DeliveryCompany {
    BOXBERRY
    CDEK
    DELLIN
    FIVEPOST
}

enum DeliveryType {
    COURIER
    POINT
}

enum PaymentType {
    BANK_CARD
    SBP
}

enum BarcodeType {
    EAN_8
    EAN_13
    ITF_14
    GS_10
    GS_1M
    SHORT
    FUR
    EGIAS_20
    EGIAS_30
    UNKNOWN
}

enum PointType {
    PVZ
    POSTAMAT
    TOBACCO
}

enum ProductType {
    PRODUCT
    SERVICE
    JOB
    ANOTHER
}

enum ProductStatus {
    DRAFT
    PUBLISH
    DELETED
}

enum PropertyType {
    STRING
    NUMBER
    SELECT
}

//  ============================================= GLOBAL =============================================

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

//  ============================================= USER =============================================

model Session {
    id               Int      @id @default(autoincrement())
    accessToken      String   @unique @map("session_token")
    refreshToken     String   @unique @map("refresh_token")
    userId           Int      @map("user_id")
    accessExpiresAt  DateTime
    refreshExpiresAt DateTime
    ip               String?
    userAgent        String?  @map("user_agent")
    user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now()) @map(name: "created_at")
    updatedAt DateTime @updatedAt @map(name: "updated_at")

    @@map("sessions")
}

model User {
    id            Int            @id @default(autoincrement())
    email         String?        @unique
    phone         String?        @unique
    lastName      String?        @map(name: "last_name")
    firstName     String?        @map(name: "first_name")
    patronymic    String?
    birthday      DateTime?
    sex           UserSex?
    password      String?
    role          UserRole
    cityId        Int?           @map("city_id")
    sessions      Session[]
    basketItems   BasketItem[]
    favoriteItems FavoriteItem[]
    checkoutItems CheckoutItem[]
    payments      Payment[]
    orders        Order[]
    city          City?          @relation(fields: [cityId], references: [id])
    products      Product[]

    createdAt DateTime  @default(now()) @map(name: "created_at")
    updatedAt DateTime  @updatedAt @map(name: "updated_at")

    @@map(name: "users")
}

//  ============================================= PROPERTY =============================================
model Property {
    id          Int              @id @default(autoincrement())
    name        String
    description String?
    type        PropertyType
    measureId   Int?
    measure     Measure?         @relation(fields: [measureId], references: [id])
    meta        Json
    options     PropertyOption[]

    categoryProperties CategoryProperty[]

    createdAt DateTime @default(now()) @map(name: "created_at")
    updatedAt DateTime @updatedAt @map(name: "updated_at")

    @@map(name: "properties")
}

model PropertyOption {
    id         Int    @id @default(autoincrement())
    value      String
    propertyId Int

    property Property @relation(fields: [propertyId], references: [id])

    createdAt DateTime @default(now()) @map(name: "created_at")
    updatedAt DateTime @updatedAt @map(name: "updated_at")

    @@map(name: "propertyoptions")
}

model CategoryProperty {
    id         Int @id @default(autoincrement())
    categorId  Int
    propertyId Int

    isUseAsFilter Boolean
    isRequired    Boolean

    category Category @relation(fields: [categorId], references: [id])
    property Property @relation(fields: [propertyId], references: [id])

    createdAt DateTime @default(now()) @map(name: "created_at")
    updatedAt DateTime @updatedAt @map(name: "updated_at")

    @@map(name: "categoryproperties")
}

//  ============================================= PRODUCT =============================================
model Category {
    id          Int     @id @default(autoincrement())
    name        String
    description String?

    products           Product[]
    categoryProperties CategoryProperty[]

    createdAt DateTime @default(now()) @map(name: "created_at")
    updatedAt DateTime @updatedAt @map(name: "updated_at")

    @@map(name: "categories")
}

model Product {
    id               Int           @id @default(autoincrement())
    name             String
    price            Float
    status           ProductStatus
    rating           Float         @default(0)
    quantity         Int
    shortDescription String        @map(name: "short_description")
    longDescription  String?       @map(name: "long_description")
    keywords         String?
    category         Category      @relation(fields: [categoryId], references: [id])
    categoryId       Int           @map(name: "category_id")
    offer            ProductOffer? @relation(fields: [offerId], references: [id])
    offerId          Int?
    barcode          String
    barcodeType      BarcodeType
    type             ProductType
    userId           Int           @map(name: "user_id")
    user             User          @relation(fields: [userId], references: [id])

    width     Int
    height    Int
    length    Int
    weight    Int
    measureId Int
    measure   Measure @relation(fields: [measureId], references: [id])

    packageQuantity Int @default(1)

    basketItems   BasketItem[]
    favoriteItems FavoriteItem[]
    orderItems    OrderItem[]
    checkoutItems CheckoutItem[]

    info       ProductInfo[]
    advantages ProductAdvantage[]
    tags       ProductTag[]
    images     ProductImage[]

    createdAt DateTime @default(now()) @map(name: "created_at")
    updatedAt DateTime @updatedAt @map(name: "updated_at")

    @@map(name: "products")
}

model ProductImage {
    id        Int     @id @default(autoincrement())
    name      String
    path      String
    productId Int
    product   Product @relation(fields: [productId], references: [id])

    createdAt DateTime @default(now()) @map(name: "created_at")
    updatedAt DateTime @updatedAt @map(name: "updated_at")

    @@map(name: "productimages")
}

model ProductInfo {
    id        Int     @id @default(autoincrement())
    header    String
    content   String
    productId Int
    product   Product @relation(fields: [productId], references: [id])

    createdAt DateTime @default(now()) @map(name: "created_at")
    updatedAt DateTime @updatedAt @map(name: "updated_at")

    @@map(name: "productnfo")
}

model ProductAdvantage {
    id          Int     @id @default(autoincrement())
    name        String
    description String
    icon        String
    productId   Int
    product     Product @relation(fields: [productId], references: [id])

    createdAt DateTime @default(now()) @map(name: "created_at")
    updatedAt DateTime @updatedAt @map(name: "updated_at")

    @@map(name: "productadvantages")
}

model ProductTag {
    id        Int     @id @default(autoincrement())
    name      String
    productId Int
    product   Product @relation(fields: [productId], references: [id])

    createdAt DateTime @default(now()) @map(name: "created_at")
    updatedAt DateTime @updatedAt @map(name: "updated_at")

    @@map(name: "producttags")
}

model ProductOffer {
    id          Int       @id @default(autoincrement())
    name        String
    description String?
    discount    Float     @default(0)
    isActive    Boolean   @default(false)
    products    Product[]

    createdAt DateTime @default(now()) @map(name: "created_at")
    updatedAt DateTime @updatedAt @map(name: "updated_at")

    @@map(name: "productoffers")
}

// ============================================= MEASURE =============================================
model Measure {
    id          Int     @id @default(autoincrement())
    name        String
    shortName   String
    description String?

    producs    Product[]
    properties Property[]

    createdAt DateTime @default(now()) @map(name: "created_at")
    updatedAt DateTime @updatedAt @map(name: "updated_at")

    @@map(name: "measure")
}

//  ============================================= ORDER =============================================

model Order {
    id          Int         @id @default(autoincrement())
    status      OrderStatus
    amount      Float
    orderItems  OrderItem[]
    userId      Int         @map(name: "user_id")
    customerId  Int         @unique @map(name: "customer_id")
    deliveryId  Int         @unique @map(name: "delivery_id")
    notice      String?
    paymentType PaymentType

    user     User          @relation(fields: [userId], references: [id])
    customer OrderCustomer @relation(fields: [customerId], references: [id])
    delivery OrderDelivery @relation(fields: [deliveryId], references: [id])
    payments Payment[]

    createdAt DateTime @default(now()) @map(name: "created_at")
    updatedAt DateTime @updatedAt @map(name: "updated_at")

    @@map(name: "orders")
}

model OrderCustomer {
    id Int @id @default(autoincrement())

    fio   String
    phone String
    email String?

    order Order?

    createdAt DateTime @default(now()) @map(name: "created_at")
    updatedAt DateTime @updatedAt @map(name: "updated_at")

    @@map(name: "ordercustomers")
}

model OrderDelivery {
    id Int @id @default(autoincrement())

    cityId   Int             @map(name: "city_id")
    city     City            @relation(fields: [cityId], references: [id])
    company  DeliveryCompany
    type     DeliveryType
    pointId  Int?            @map(name: "point_id")
    point    Point?          @relation(fields: [pointId], references: [id])
    address  String?
    timeFrom String?
    timeTo   String?

    order Order?

    createdAt DateTime @default(now()) @map(name: "created_at")
    updatedAt DateTime @updatedAt @map(name: "updated_at")

    @@map(name: "orderdeliveries")
}

model OrderItem {
    id        Int     @id @default(autoincrement())
    quantity  Int     @default(1)
    productId Int     @map(name: "product_id")
    product   Product @relation(fields: [productId], references: [id])
    orderId   Int     @map(name: "order_id")
    order     Order   @relation(fields: [orderId], references: [id])

    createdAt DateTime @default(now()) @map(name: "created_at")
    updatedAt DateTime @updatedAt @map(name: "updated_at")

    @@unique([productId, orderId])
    @@map(name: "orderitems")
}

//  ============================================= BASKET =============================================
model BasketItem {
    id        Int     @id @default(autoincrement())
    quantity  Int     @default(1)
    productId Int     @map(name: "product_id")
    product   Product @relation(fields: [productId], references: [id])
    userId    Int     @map(name: "user_id")
    user      User    @relation(fields: [userId], references: [id])

    createdAt DateTime @default(now()) @map(name: "created_at")
    updatedAt DateTime @updatedAt @map(name: "updated_at")

    @@unique([productId, userId])
    @@map(name: "basketitems")
}

//  ============================================= CHECKOUT =============================================
model CheckoutItem {
    id        Int     @id @default(autoincrement())
    quantity  Int     @default(1)
    productId Int     @map(name: "product_id")
    product   Product @relation(fields: [productId], references: [id])
    userId    Int     @map(name: "user_id")
    user      User    @relation(fields: [userId], references: [id])

    createdAt DateTime @default(now()) @map(name: "created_at")
    updatedAt DateTime @updatedAt @map(name: "updated_at")

    @@unique([productId, userId])
    @@map(name: "checkoutitems")
}

//  ============================================= FAVORITE =============================================
model FavoriteItem {
    id        Int     @id @default(autoincrement())
    productId Int     @map(name: "product_id")
    product   Product @relation(fields: [productId], references: [id])
    userId    Int     @map(name: "user_id")
    user      User    @relation(fields: [userId], references: [id])

    createdAt DateTime @default(now()) @map(name: "created_at")
    updatedAt DateTime @updatedAt @map(name: "updated_at")

    @@unique([productId, userId])
    @@map(name: "favoriteitems")
}

//  ============================================= BASKET =============================================
model Payment {
    id         Int           @id @default(autoincrement())
    userId     Int           @map(name: "user_id")
    orderId    Int           @map(name: "order_id")
    status     PaymentStatus @default(PENDING)
    yookassaId String        @unique @map(name: "yookassa_id")

    user  User  @relation(fields: [userId], references: [id])
    order Order @relation(fields: [orderId], references: [id])

    createdAt DateTime @default(now()) @map(name: "created_at")
    updatedAt DateTime @updatedAt @map(name: "updated_at")

    @@map(name: "payments")
}

//  ============================================= CODES =============================================
model SmsCode {
    id        Int      @id @default(autoincrement())
    phone     String
    code      String
    isActive  Boolean  @default(false)
    expiresAt DateTime

    createdAt DateTime @default(now()) @map(name: "created_at")
    updatedAt DateTime @updatedAt @map(name: "updated_at")

    @@map(name: "sms_codes")
}

model EmailCode {
    id        Int      @id @default(autoincrement())
    email     String
    code      String
    isActive  Boolean  @default(false)
    expiresAt DateTime

    createdAt DateTime @default(now()) @map(name: "created_at")
    updatedAt DateTime @updatedAt @map(name: "updated_at")

    @@map(name: "email_codes")
}

//  ============================================= ADDRESS =============================================
model City {
    id       Int     @id @default(autoincrement())
    name     String
    region   String
    prefix   String
    isActive Boolean @default(false)

    boxberryId Int? @map(name: "boxberry_id")
    cdekId     Int? @map(name: "cdek_id")
    dellinId   Int? @map(name: "dellin_id")
    fivepostId Int? @map(name: "fivepost_id")

    users           User[]
    orderDeliveries OrderDelivery[]

    createdAt DateTime @default(now()) @map(name: "created_at")
    updatedAt DateTime @updatedAt @map(name: "updated_at")

    @@map(name: "cities")
}

model Point {
    id Int @id @default(autoincrement())

    deliveryCompany DeliveryCompany
    type            PointType
    orderDeliveries OrderDelivery[]

    // innerId
    // name
    // organization
    // phone
    // email
    // fullAddress
    // address

    // flagas
    // isUsing

    // Выдача только полностью оплаченных посылок
    // Возможность оплаты банковской картой
    // Возможность примерки (Наличие примерочной)
    // Возможность частичной выдачи заказа
    // Возможность проведения оплаты наличными
    // Возможность оплаты картой лояльности
    // Разрешен наложенный платеж, может принимать значения:
    // Признак работы терминала на выдачу груза
    // Признак работы терминала на приём груза

    // workTime
    // images 
    // cityId
    // description
    // facts
    // meta

    maxWeight Float
    maxHeight Float
    maxWidth  Float
    maxLength Float
    maxVolume Float

    longitude Float
    latitude  Float

    createdAt DateTime @default(now()) @map(name: "created_at")
    updatedAt DateTime @updatedAt @map(name: "updated_at")

    @@map(name: "points")
}

model Intaker {
    id Int @id @default(autoincrement())

    arriveAt        DateTime
    deliveryCompany DeliveryCompany

    createdAt DateTime @default(now()) @map(name: "created_at")
    updatedAt DateTime @updatedAt @map(name: "updated_at")

    @@map(name: "intakers")
}

//  ============================================= SUPPORT_REPORT =============================================
model Support {
    id      Int     @id @default(autoincrement())
    userId  Int
    email   String?
    message String

    createdAt DateTime @default(now()) @map(name: "created_at")
    updatedAt DateTime @updatedAt @map(name: "updated_at")

    @@map(name: "support")
}
