import Container from '@/components/grid/Container';
import Row from '@/components/grid/Row';
import Col from '@/components/grid/Col';
import Text from '@/components/typography/Text';
import Paragraph from '@/components/typography/Paragraph';
import Title from '@/components/typography/Title';
import Link from '@/components/typography/Link';
import Icon from '@/components/Icon';
import Empty from '@/components/Empty';
import Result from '@/components/Result';
import Button from '@/components/Button';
import Tooltip from '@/components/floating/Tooltip';
import Input from '@/components/form/Input';
import InputNumber from '@/components/form/InputNumber';
import ModalDialog from '@/components/modal/ModalDialog';
import Flex from '@/components/Flex';
import Chip from '@/components/Chip';
import Table from '@/components/Table';

import TestRequestButton from '@/features/development/components/TestRequestButton';

import type { Metadata } from 'next';

import type { PageProps, SearchParams } from '@/typings';

import styles from './page.module.scss';
import classNames from 'classnames';

import { parseSearchParams as psp } from '@/utils/actions/search-params';

import {
    dadataSuggestSettlements,
    dadataSuggestEmails,
    dadataSuggestFio,
    dadataParseFio,
} from '@/features/api/dadata';

export const metadata: Metadata = {
    title: 'Тестирование запросов',
    description: 'Generated by create next app',
};

const testRequests = [
    function testSuggestSettlements() {
        return dadataSuggestSettlements({
            query: 'Мос',
        });
    },
    function testSuggestEmails() {
        return dadataSuggestEmails({
            query: 'sme',
        });
    },
    function testSuggestFio() {
        return dadataSuggestFio({
            query: 'Смердов Никита Па',
        });
    },
    function testParseFio() {
        return dadataParseFio({
            fio: 'Смердов Никита Па',
        });
    },
];

export default async function Test(props: PageProps) {
    const requestName = psp.string(props.searchParams?.name);
    const request = testRequests.find((r) => r.name === requestName);
    let response;
    if (request) {
        response = await request();
    }

    return (
        <main>
            <Container className="mt-lg">
                <Row>
                    <Col md={3}>
                        <Title level={2} className="mb-sm">
                            Request
                        </Title>
                        <Flex direction="column" gapY="md">
                            {testRequests.map((request, index) => (
                                <div key={index}>
                                    <TestRequestButton name={request.name} />
                                </div>
                            ))}
                        </Flex>
                    </Col>
                    <Col md={9}>
                        <Title level={2} className="mb-sm">
                            Response
                        </Title>
                        {response && (
                            <div className={styles.response}>
                                <Text code>{JSON.stringify(response, null, 4)}</Text>
                            </div>
                        )}
                    </Col>
                </Row>
            </Container>
        </main>
    );
}
